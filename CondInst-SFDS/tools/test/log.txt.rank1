[08/01 10:59:28] detectron2 INFO: Rank of current process: 1. World size: 2
[08/01 10:59:32] detectron2 INFO: Environment info:
----------------------  -----------------------------------------------------------------------------------
sys.platform            linux
Python                  3.7.10 (default, Feb 26 2021, 18:47:35) [GCC 7.3.0]
numpy                   1.20.1
detectron2              0.3 @/home/gxl/code/detectron2/detectron2
Compiler                GCC 7.4
CUDA compiler           CUDA 11.1
detectron2 arch flags   7.5
DETECTRON2_ENV_MODULE   <not set>
PyTorch                 1.8.0+cu111 @/home/gxl/.conda/envs/condinst/lib/python3.7/site-packages/torch
PyTorch debug build     False
GPU available           True
GPU 0,1                 GeForce RTX 2080 (arch=7.5)
CUDA_HOME               /usr/local/cuda-10.1
Pillow                  8.1.2
torchvision             0.9.0+cu111 @/home/gxl/.conda/envs/condinst/lib/python3.7/site-packages/torchvision
torchvision arch flags  3.5, 5.0, 6.0, 7.0, 7.5, 8.0, 8.6
fvcore                  0.1.3.post20210311
cv2                     4.5.1
----------------------  -----------------------------------------------------------------------------------
PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v1.7.0 (Git Hash 7aed236906b1f7a05c0917e5257a1af05e9ff683)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - NNPACK is enabled
  - CPU capability usage: AVX
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.8.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

[08/01 10:59:32] detectron2 INFO: Command line arguments: Namespace(config_file='/home/gxl/code/AdelaiDet/configs/CondInst/RESD_50_1x_gxl_baseline_cls_2.yaml', dist_url='tcp://127.0.0.1:50166', eval_only=False, machine_rank=0, num_gpus=2, num_machines=1, opts=[], resume=False)
[08/01 10:59:32] detectron2 INFO: Contents of args.config_file=/home/gxl/code/AdelaiDet/configs/CondInst/RESD_50_1x_gxl_baseline_cls_2.yaml:
_BASE_: "Base-CondInst.yaml"
VERSION: 2
MODEL:
  BASIS_MODULE:
    NUM_CLASSES: 2
    NORM: GN
  #WEIGHTS: /home/gxl/code/AdelaiDet/checkpoint/CondInst_MS_R_50_1x.pth
  BACKBONE:
    NAME: "build_fcos_resnet_fpn_backbone"
    FREEZE_AT: -1
  RESNETD: True
  RESNETS:
    DEPTH: 50
    NORM: 'GN'
    OUT_FEATURES: ["res3", "res4", "res5"]
  FPN:
    IN_FEATURES: ["res3", "res4", "res5"]
  FCOS:
    USE_DEFORMABLE: False
    USE_ATTENTION: False
    ATTENTION_MODEL: 'SPSA'
    CENTER_SAMPLE: True
    THRESH_WITH_CTR: False
    NUM_CLASSES: 2
    NMS_TH: 0.6
    POS_RADIUS: 1.5
    TOP_LEVELS: 2 #2
    SIZES_OF_INTEREST: [64, 128, 256, 512]
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7'] #['p3', 'p4', 'p5', 'p6', 'p7']
  ROI_HEADS:
    NUM_CLASSES: 2
  CONDINST:
    MASK_OUT_STRIDE: 4
    TOP_WITH_COORDS: False
    BOX_WITH_COORDS: False
    CLS_WITH_COORDS: False
    MASK_BRANCH:
      FUSE_TYPE: 'sum'
      USE_ATTENTION: False
      ATTENTION_MODEL: 'SPSA'
      NORM: GN
    MASK_HEAD:
      SPECIAL_CLASSES_LOSS: False
      SPECIAL_CLASSES: [1,]
      ALPHA: 0.35
      BETA: 0.65
      USE_MASK_NMS: True
      MASK_THR: 0.99
      UPDATE_THR: 0.5
DATASETS:
  TRAIN: ("coco_filament_train",)
  TEST: ("coco_filament_val",)
SOLVER:
  AMP:
    ENABLED: False
  IMS_PER_BATCH: 2
  BASE_LR: 0.002
  OPTIMIZER: SGD
  # MAX_ITER = epoch * image_train_total_nums / IMS_PER_BATCH
  # 127500/255=500
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 86680
  STEPS: (26680, 66680) #(52008, 69334)
  CHECKPOINT_PERIOD: 4334
  DEBUG: False
INPUT:
  #MIN_SIZE_TRAIN: (512, 640, 768, 896, 1024,)
  MIN_SIZE_TRAIN: (1024,)
  MAX_SIZE_TRAIN: 1024
  # CROP:
  #  ENABLED: True
  #  SIZE: [800, 800]
  #  TYPE: absolute_range
  MIN_SIZE_TEST: 1024  
  MAX_SIZE_TEST: 1024
TEST:
  EVAL_PERIOD: 4334

OUTPUT_DIR: "test" #"/home/gxl/Result/CondInst/output/resnetd50/20210729-3"

[08/01 10:59:32] detectron2 INFO: Running with full config:
CUDNN_BENCHMARK: False
DATALOADER:
  ASPECT_RATIO_GROUPING: True
  FILTER_EMPTY_ANNOTATIONS: True
  NUM_WORKERS: 4
  REPEAT_THRESHOLD: 0.0
  SAMPLER_TRAIN: TrainingSampler
DATASETS:
  PRECOMPUTED_PROPOSAL_TOPK_TEST: 1000
  PRECOMPUTED_PROPOSAL_TOPK_TRAIN: 2000
  PROPOSAL_FILES_TEST: ()
  PROPOSAL_FILES_TRAIN: ()
  TEST: ('coco_filament_val',)
  TRAIN: ('coco_filament_train',)
GLOBAL:
  HACK: 1.0
INPUT:
  CROP:
    CROP_INSTANCE: True
    ENABLED: False
    SIZE: [0.9, 0.9]
    TYPE: relative_range
  FORMAT: BGR
  HFLIP_TRAIN: True
  MASK_FORMAT: polygon
  MAX_SIZE_TEST: 1024
  MAX_SIZE_TRAIN: 1024
  MIN_SIZE_TEST: 1024
  MIN_SIZE_TRAIN: (1024,)
  MIN_SIZE_TRAIN_SAMPLING: choice
  RANDOM_FLIP: horizontal
MODEL:
  ANCHOR_GENERATOR:
    ANGLES: [[-90, 0, 90]]
    ASPECT_RATIOS: [[0.5, 1.0, 2.0]]
    NAME: DefaultAnchorGenerator
    OFFSET: 0.0
    SIZES: [[32, 64, 128, 256, 512]]
  BACKBONE:
    ANTI_ALIAS: False
    FREEZE_AT: -1
    NAME: build_fcos_resnet_fpn_backbone
  BASIS_MODULE:
    ANN_SET: coco
    COMMON_STRIDE: 8
    CONVS_DIM: 128
    IN_FEATURES: ['p3', 'p4', 'p5']
    LOSS_ON: False
    LOSS_WEIGHT: 0.3
    NAME: ProtoNet
    NORM: GN
    NUM_BASES: 4
    NUM_CLASSES: 2
    NUM_CONVS: 3
  BATEXT:
    CANONICAL_SIZE: 96
    CONV_DIM: 256
    IN_FEATURES: ['p2', 'p3', 'p4']
    NUM_CHARS: 25
    NUM_CONV: 2
    POOLER_RESOLUTION: (8, 32)
    POOLER_SCALES: (0.25, 0.125, 0.0625)
    RECOGNITION_LOSS: ctc
    RECOGNIZER: attn
    SAMPLING_RATIO: 1
    VOC_SIZE: 96
  BLENDMASK:
    ATTN_SIZE: 14
    BOTTOM_RESOLUTION: 56
    INSTANCE_LOSS_WEIGHT: 1.0
    POOLER_SAMPLING_RATIO: 1
    POOLER_SCALES: (0.25,)
    POOLER_TYPE: ROIAlignV2
    TOP_INTERP: bilinear
    VISUALIZE: False
  BiFPN:
    IN_FEATURES: ['res2', 'res3', 'res4', 'res5']
    NORM: 
    NUM_REPEATS: 6
    OUT_CHANNELS: 160
  CONDINST:
    BOX_WITH_COORDS: False
    CLS_WITH_COORDS: False
    MASK_BRANCH:
      ATTENTION_MODEL: SPSA
      CHANNELS: 128
      FUSE_TYPE: sum
      IN_FEATURES: ['p3', 'p4', 'p5']
      NORM: GN
      NUM_CONVS: 4
      OUT_CHANNELS: 8
      SEMANTIC_LOSS_ON: False
      USE_ATTENTION: False
    MASK_HEAD:
      ALPHA: 0.35
      BETA: 0.65
      CHANNELS: 8
      DISABLE_REL_COORDS: False
      MASK_THR: 0.99
      MAX_PRE_IMG: 100
      NMS_KERNEL: gaussian
      NMS_PRE: 500
      NMS_SIGMA: 2
      NMS_THRESH_ALL: 0.8
      NMS_THRESH_NORM: 0.6
      NMS_THRESH_SPC: 0.3
      NUM_LAYERS: 3
      SCORE_THR: 0.1
      SPECIAL_CLASSES: [1]
      SPECIAL_CLASSES_LOSS: False
      SPECIAL_CLASSES_THRESH: False
      UPDATE_THR: 0.5
      USE_FP16: False
      USE_MASK_NMS: True
    MASK_OUT_STRIDE: 4
    MAX_PROPOSALS: 500
    TOP_WITH_COORDS: False
    USE_CENTROID: False
  DEVICE: cuda
  DLA:
    CONV_BODY: DLA34
    NORM: FrozenBN
    OUT_FEATURES: ['stage2', 'stage3', 'stage4', 'stage5']
  FCOS:
    ATTENTION_MODEL: SPSA
    BBOX_REG_WEIGHTS: [1.0, 1.0, 1.0, 1.0]
    CENTER_SAMPLE: True
    FPN_STRIDES: [8, 16, 32, 64, 128]
    INFERENCE_TH_TEST: 0.05
    INFERENCE_TH_TRAIN: 0.05
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    LOC_LOSS_TYPE: giou
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    NMS_TH: 0.6
    NMS_TYPE: normal
    NORM: GN
    NORM_REG_TARGETS: True
    NUM_BOX_CONVS: 4
    NUM_CLASSES: 2
    NUM_CLS_CONVS: 4
    NUM_SHARE_CONVS: 0
    POST_NMS_TOPK_TEST: 100
    POST_NMS_TOPK_TRAIN: 100
    POS_RADIUS: 1.5
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 1000
    PRIOR_PROB: 0.01
    REG_WEIGHT: 2.0
    SIZES_OF_INTEREST: [64, 128, 256, 512]
    THRESH_WITH_CTR: False
    TOP_LEVELS: 2
    USE_ATTENTION: False
    USE_DEFORMABLE: False
    USE_RELU: True
    USE_SCALE: True
    YIELD_PROPOSAL: False
  FPN:
    FUSE_TYPE: sum
    IN_FEATURES: ['res3', 'res4', 'res5']
    NORM: 
    OUT_CHANNELS: 256
  KEYPOINT_ON: False
  LOAD_PROPOSALS: False
  MASK_ON: True
  MEInst:
    AGNOSTIC: True
    CENTER_SAMPLE: True
    DIM_MASK: 60
    FLAG_PARAMETERS: False
    FPN_STRIDES: [8, 16, 32, 64, 128]
    GCN_KERNEL_SIZE: 9
    INFERENCE_TH_TEST: 0.05
    INFERENCE_TH_TRAIN: 0.05
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    LAST_DEFORMABLE: False
    LOC_LOSS_TYPE: giou
    LOSS_ALPHA: 0.25
    LOSS_GAMMA: 2.0
    LOSS_ON_MASK: False
    MASK_LOSS_TYPE: mse
    MASK_ON: True
    MASK_SIZE: 28
    NMS_TH: 0.6
    NORM: GN
    NUM_BOX_CONVS: 4
    NUM_CLASSES: 80
    NUM_CLS_CONVS: 4
    NUM_MASK_CONVS: 4
    NUM_SHARE_CONVS: 0
    PATH_COMPONENTS: datasets/coco/components/coco_2017_train_class_agnosticTrue_whitenTrue_sigmoidTrue_60.npz
    POST_NMS_TOPK_TEST: 100
    POST_NMS_TOPK_TRAIN: 100
    POS_RADIUS: 1.5
    PRE_NMS_TOPK_TEST: 1000
    PRE_NMS_TOPK_TRAIN: 1000
    PRIOR_PROB: 0.01
    SIGMOID: True
    SIZES_OF_INTEREST: [64, 128, 256, 512]
    THRESH_WITH_CTR: False
    TOP_LEVELS: 2
    TYPE_DEFORMABLE: DCNv1
    USE_DEFORMABLE: False
    USE_GCN_IN_MASK: False
    USE_RELU: True
    USE_SCALE: True
    WHITEN: True
  META_ARCHITECTURE: CondInst
  MOBILENET: False
  PANOPTIC_FPN:
    COMBINE:
      ENABLED: True
      INSTANCES_CONFIDENCE_THRESH: 0.5
      OVERLAP_THRESH: 0.5
      STUFF_AREA_LIMIT: 4096
    INSTANCE_LOSS_WEIGHT: 1.0
  PIXEL_MEAN: [103.53, 116.28, 123.675]
  PIXEL_STD: [1.0, 1.0, 1.0]
  POTO:
    ALPHA: 0.8
    AUX_TOPK: 9
    CENTER_SAMPLING_RADIUS: 1.5
    FILTER_KERNEL_SIZE: 3
    FILTER_TAU: 2
  PROPOSAL_GENERATOR:
    MIN_SIZE: 0
    NAME: FCOS
  RESNETD: True
  RESNETS:
    DEFORM_INTERVAL: 1
    DEFORM_MODULATED: False
    DEFORM_NUM_GROUPS: 1
    DEFORM_ON_PER_STAGE: [False, False, False, False]
    DEPTH: 50
    NORM: GN
    NUM_GROUPS: 1
    OUT_FEATURES: ['res3', 'res4', 'res5']
    RES2_OUT_CHANNELS: 256
    RES5_DILATION: 1
    STEM_OUT_CHANNELS: 64
    STRIDE_IN_1X1: True
    WIDTH_PER_GROUP: 64
  RETINANET:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    FOCAL_LOSS_ALPHA: 0.25
    FOCAL_LOSS_GAMMA: 2.0
    IN_FEATURES: ['p3', 'p4', 'p5', 'p6', 'p7']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.4, 0.5]
    NMS_THRESH_TEST: 0.5
    NORM: 
    NUM_CLASSES: 80
    NUM_CONVS: 4
    PRIOR_PROB: 0.01
    SCORE_THRESH_TEST: 0.05
    SMOOTH_L1_LOSS_BETA: 0.1
    TOPK_CANDIDATES_TEST: 1000
  ROI_BOX_CASCADE_HEAD:
    BBOX_REG_WEIGHTS: ((10.0, 10.0, 5.0, 5.0), (20.0, 20.0, 10.0, 10.0), (30.0, 30.0, 15.0, 15.0))
    IOUS: (0.5, 0.6, 0.7)
  ROI_BOX_HEAD:
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (10.0, 10.0, 5.0, 5.0)
    CLS_AGNOSTIC_BBOX_REG: False
    CONV_DIM: 256
    FC_DIM: 1024
    NAME: 
    NORM: 
    NUM_CONV: 0
    NUM_FC: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
    SMOOTH_L1_BETA: 0.0
    TRAIN_ON_PRED_BOXES: False
  ROI_HEADS:
    BATCH_SIZE_PER_IMAGE: 512
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, 1]
    IOU_THRESHOLDS: [0.5]
    NAME: Res5ROIHeads
    NMS_THRESH_TEST: 0.5
    NUM_CLASSES: 2
    POSITIVE_FRACTION: 0.25
    PROPOSAL_APPEND_GT: True
    SCORE_THRESH_TEST: 0.05
  ROI_KEYPOINT_HEAD:
    CONV_DIMS: (512, 512, 512, 512, 512, 512, 512, 512)
    LOSS_WEIGHT: 1.0
    MIN_KEYPOINTS_PER_IMAGE: 1
    NAME: KRCNNConvDeconvUpsampleHead
    NORMALIZE_LOSS_BY_VISIBLE_KEYPOINTS: True
    NUM_KEYPOINTS: 17
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  ROI_MASK_HEAD:
    CLS_AGNOSTIC_MASK: False
    CONV_DIM: 256
    NAME: MaskRCNNConvUpsampleHead
    NORM: 
    NUM_CONV: 0
    POOLER_RESOLUTION: 14
    POOLER_SAMPLING_RATIO: 0
    POOLER_TYPE: ROIAlignV2
  RPN:
    BATCH_SIZE_PER_IMAGE: 256
    BBOX_REG_LOSS_TYPE: smooth_l1
    BBOX_REG_LOSS_WEIGHT: 1.0
    BBOX_REG_WEIGHTS: (1.0, 1.0, 1.0, 1.0)
    BOUNDARY_THRESH: -1
    HEAD_NAME: StandardRPNHead
    IN_FEATURES: ['res4']
    IOU_LABELS: [0, -1, 1]
    IOU_THRESHOLDS: [0.3, 0.7]
    LOSS_WEIGHT: 1.0
    NMS_THRESH: 0.7
    POSITIVE_FRACTION: 0.5
    POST_NMS_TOPK_TEST: 1000
    POST_NMS_TOPK_TRAIN: 2000
    PRE_NMS_TOPK_TEST: 6000
    PRE_NMS_TOPK_TRAIN: 12000
    SMOOTH_L1_BETA: 0.0
  SEM_SEG_HEAD:
    COMMON_STRIDE: 4
    CONVS_DIM: 128
    IGNORE_VALUE: 255
    IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    LOSS_WEIGHT: 1.0
    NAME: SemSegFPNHead
    NORM: GN
    NUM_CLASSES: 54
  SHIFT_GENERATOR:
    NUM_SHIFTS: 1
    OFFSET: 0.5
  SOLOV2:
    FPN_INSTANCE_STRIDES: [8, 8, 16, 32, 32]
    FPN_SCALE_RANGES: ((1, 96), (48, 192), (96, 384), (192, 768), (384, 2048))
    INSTANCE_CHANNELS: 512
    INSTANCE_IN_CHANNELS: 256
    INSTANCE_IN_FEATURES: ['p2', 'p3', 'p4', 'p5', 'p6']
    LOSS:
      DICE_WEIGHT: 3.0
      FOCAL_ALPHA: 0.25
      FOCAL_GAMMA: 2.0
      FOCAL_USE_SIGMOID: True
      FOCAL_WEIGHT: 1.0
    MASK_CHANNELS: 128
    MASK_IN_CHANNELS: 256
    MASK_IN_FEATURES: ['p2', 'p3', 'p4', 'p5']
    MASK_THR: 0.5
    MAX_PER_IMG: 100
    NMS_KERNEL: gaussian
    NMS_PRE: 500
    NMS_SIGMA: 2
    NMS_TYPE: matrix
    NORM: GN
    NUM_CLASSES: 80
    NUM_GRIDS: [40, 36, 24, 16, 12]
    NUM_INSTANCE_CONVS: 4
    NUM_KERNELS: 256
    NUM_MASKS: 256
    PRIOR_PROB: 0.01
    SCORE_THR: 0.1
    SIGMA: 0.2
    TYPE_DCN: DCN
    UPDATE_THR: 0.05
    USE_COORD_CONV: True
    USE_DCN_IN_INSTANCE: False
  TOP_MODULE:
    DIM: 16
    NAME: conv
  VOVNET:
    BACKBONE_OUT_CHANNELS: 256
    CONV_BODY: V-39-eSE
    NORM: FrozenBN
    OUT_CHANNELS: 256
    OUT_FEATURES: ['stage2', 'stage3', 'stage4', 'stage5']
  WEIGHTS: 
OUTPUT_DIR: test
SEED: -1
SOLVER:
  AMP:
    ENABLED: False
  BASE_LR: 0.002
  BETAS: (0.9, 0.999)
  BIAS_LR_FACTOR: 1.0
  CHECKPOINT_PERIOD: 4334
  CLIP_GRADIENTS:
    CLIP_TYPE: value
    CLIP_VALUE: 1.0
    ENABLED: False
    NORM_TYPE: 2.0
  DEBUG: False
  EPS: 1e-08
  GAMMA: 0.1
  IMS_PER_BATCH: 2
  LR_SCHEDULER_NAME: WarmupMultiStepLR
  MAX_ITER: 86680
  MOMENTUM: 0.9
  NESTEROV: False
  OPTIMIZER: SGD
  REFERENCE_WORLD_SIZE: 0
  STEPS: (26680, 66680)
  WARMUP_FACTOR: 0.001
  WARMUP_ITERS: 1000
  WARMUP_METHOD: linear
  WEIGHT_DECAY: 0.0001
  WEIGHT_DECAY_BIAS: 0.0001
  WEIGHT_DECAY_NORM: 0.0
TEST:
  AUG:
    ENABLED: False
    FLIP: True
    MAX_SIZE: 4000
    MIN_SIZES: (400, 500, 600, 700, 800, 900, 1000, 1100, 1200)
  DETECTIONS_PER_IMAGE: 100
  EVAL_PERIOD: 4334
  EXPECTED_RESULTS: []
  KEYPOINT_OKS_SIGMAS: []
  PRECISE_BN:
    ENABLED: False
    NUM_ITER: 200
VERSION: 2
VIS_PERIOD: 0
[08/01 10:59:32] detectron2.utils.env INFO: Using a generated random seed 32134455
[08/01 10:59:43] detectron2.engine.defaults INFO: Model:
CondInst(
  (backbone): FPN(
    (fpn_lateral3): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral4): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output4): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (fpn_lateral5): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
    (fpn_output5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    (top_block): LastLevelP6P7(
      (p6): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      (p7): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
    )
    (bottom_up): ResNetD(
      (stem): BasicStem(
        (conv1): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
        (bn1): GroupNorm(32, 32, eps=1e-05, affine=True)
        (activate1): ReLU(inplace=True)
        (conv2): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): GroupNorm(32, 32, eps=1e-05, affine=True)
        (activate2): ReLU(inplace=True)
        (conv3): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn3): GroupNorm(32, 64, eps=1e-05, affine=True)
        (activate3): ReLU(inplace=True)
        (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      )
      (res2): Sequential(
        (0): BottleneckBlock(
          (shortcut): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn1): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BottleneckBlock(
          (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): BottleneckBlock(
          (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 64, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (res3): Sequential(
        (0): BottleneckBlock(
          (shortcut): Sequential(
            (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (1): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (bn1): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BottleneckBlock(
          (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): BottleneckBlock(
          (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3): BottleneckBlock(
          (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 128, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (res4): Sequential(
        (0): BottleneckBlock(
          (shortcut): Sequential(
            (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (1): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (bn1): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BottleneckBlock(
          (bn1): GroupNorm(32, 1024, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): BottleneckBlock(
          (bn1): GroupNorm(32, 1024, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (3): BottleneckBlock(
          (bn1): GroupNorm(32, 1024, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (4): BottleneckBlock(
          (bn1): GroupNorm(32, 1024, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (5): BottleneckBlock(
          (bn1): GroupNorm(32, 1024, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 256, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
      (res5): Sequential(
        (0): BottleneckBlock(
          (shortcut): Sequential(
            (0): AvgPool2d(kernel_size=2, stride=2, padding=0)
            (1): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
          )
          (bn1): GroupNorm(32, 1024, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (1): BottleneckBlock(
          (bn1): GroupNorm(32, 2048, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
        (2): BottleneckBlock(
          (bn1): GroupNorm(32, 2048, eps=1e-05, affine=True)
          (activate1): ReLU(inplace=True)
          (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (bn2): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate2): ReLU(inplace=True)
          (conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
          (bn3): GroupNorm(32, 512, eps=1e-05, affine=True)
          (activate3): ReLU(inplace=True)
          (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        )
      )
    )
  )
  (proposal_generator): FCOS(
    (fcos_head): FCOSHead(
      (attention_model): ModuleList()
      (cls_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (bbox_tower): Sequential(
        (0): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (1): GroupNorm(32, 256, eps=1e-05, affine=True)
        (2): ReLU()
        (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (4): GroupNorm(32, 256, eps=1e-05, affine=True)
        (5): ReLU()
        (6): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (7): GroupNorm(32, 256, eps=1e-05, affine=True)
        (8): ReLU()
        (9): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (10): GroupNorm(32, 256, eps=1e-05, affine=True)
        (11): ReLU()
      )
      (share_tower): Sequential()
      (cls_logits): Conv2d(256, 2, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (bbox_pred): Conv2d(256, 4, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (ctrness): Conv2d(256, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (scales): ModuleList(
        (0): Scale()
        (1): Scale()
        (2): Scale()
        (3): Scale()
        (4): Scale()
      )
    )
    (fcos_outputs): FCOSOutputs(
      (loc_loss_func): IOULoss()
    )
  )
  (mask_head): DynamicMaskHead()
  (mask_branch): MaskBranch(
    (refine): ModuleList(
      (0): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
    )
    (tower): Sequential(
      (0): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
      (1): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
      (2): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
      (3): Sequential(
        (0): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (1): GroupNorm(32, 128, eps=1e-05, affine=True)
        (2): ReLU(inplace=True)
      )
      (4): Conv2d(128, 8, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (controller): Conv2d(256, 169, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
)
[08/01 10:59:44] detectron2.data.dataset_mapper INFO: [DatasetMapper] Augmentations used in training: [ResizeShortestEdge(short_edge_length=(1024,), max_size=1024, sample_style='choice'), RandomFlip()]
[08/01 10:59:44] adet.data.dataset_mapper_gxl INFO: Rebuilding the augmentations. The previous augmentations will be overridden.
[08/01 10:59:44] adet.data.dataset_mapper_gxl INFO: Augmentations used in training: [RandomFlip(prob=0.5, horizontal=False, vertical=True), RandomFlip(prob=0.5), RandomBrightness(intensity_min=0.6, intensity_max=1.3), RandomContrast(intensity_min=0.6, intensity_max=1.3), ResizeShortestEdge(short_edge_length=(1024,), max_size=1024, sample_style='choice'), RandomFlip()]
[08/01 10:59:45] detectron2.data.datasets.coco INFO: Loading /home/gxl/Data/20210704-use/annotations/train.json takes 1.46 seconds.
[08/01 10:59:45] detectron2.data.datasets.coco INFO: Loaded 4220 images in COCO format from /home/gxl/Data/20210704-use/annotations/train.json
[08/01 10:59:46] detectron2.data.build INFO: Removed 0 images with no usable annotations. 4220 images left.
[08/01 10:59:47] detectron2.data.build INFO: Distribution of instances among all 2 categories:
[36m|  category  | #instances   |   category    | #instances   |
|:----------:|:-------------|:-------------:|:-------------|
| Filaments  | 23068        | Filament_al.. | 65595        |
|            |              |               |              |
|   total    | 88663        |               |              |[0m
[08/01 10:59:47] detectron2.data.build INFO: Using training sampler TrainingSampler
[08/01 10:59:47] detectron2.data.common INFO: Serializing 4220 elements to byte tensors and concatenating them all ...
[08/01 10:59:48] detectron2.data.common INFO: Serialized dataset takes 19.46 MiB
[08/01 10:59:48] fvcore.common.checkpoint INFO: No checkpoint found. Initializing model from scratch
[08/01 10:59:48] detectron2.engine.train_loop INFO: Starting training from iteration 0
[08/01 11:01:37] detectron2.engine.hooks INFO: Total training time: 0:01:48 (0:00:00 on hooks)
